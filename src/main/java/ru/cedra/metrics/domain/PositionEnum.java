//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.05.21 at 11:21:27 PM SAMT 
//


package ru.cedra.metrics.domain;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PositionEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PositionEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="PREMIUMFIRST"/>
 *     &lt;enumeration value="PREMIUMBLOCK"/>
 *     &lt;enumeration value="FOOTERFIRST"/>
 *     &lt;enumeration value="FOOTERBLOCK"/>
 *     &lt;enumeration value="P11"/>
 *     &lt;enumeration value="P12"/>
 *     &lt;enumeration value="P13"/>
 *     &lt;enumeration value="P21"/>
 *     &lt;enumeration value="P22"/>
 *     &lt;enumeration value="P23"/>
 *     &lt;enumeration value="P24"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "PositionEnum")
@XmlEnum
public enum PositionEnum {

    PREMIUMFIRST("PREMIUMFIRST"),
    PREMIUMBLOCK("PREMIUMBLOCK"),
    FOOTERFIRST("FOOTERFIRST"),
    FOOTERBLOCK("FOOTERBLOCK"),
    @XmlEnumValue("P11")
    P_11("P11"),
    @XmlEnumValue("P12")
    P_12("P12"),
    @XmlEnumValue("P13")
    P_13("P13"),
    @XmlEnumValue("P21")
    P_21("P21"),
    @XmlEnumValue("P22")
    P_22("P22"),
    @XmlEnumValue("P23")
    P_23("P23"),
    @XmlEnumValue("P24")
    P_24("P24");
    private final String value;

    PositionEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PositionEnum fromValue(String v) {
        for (PositionEnum c: PositionEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
